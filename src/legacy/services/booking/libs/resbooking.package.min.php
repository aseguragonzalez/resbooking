<?php abstract class BaseManagement{protected $IdProject = 0;protected $IdService = 0;protected $Repository = NULL;protected $Service = NULL;protected $Aggregate = NULL;public function __construct($project = 0, $service = 0){$this->IdProject = $project;$this->IdService = $service;}public abstract function GetAggregate();public static function GetInstance($project = 0, $service = 0){}}abstract class BaseAggregate{public $Project = NULL;public $IdProject = 0;public $IdService = 0;abstract public function SetAggregate();}abstract class BaseServices{protected $Aggregate = NULL;protected $Repository = NULL;protected $IdProject = 0;protected $IdService = 0;public function __construct($aggregate = NULL){if($aggregate != NULL){ $this->Aggregate = $aggregate; $this->IdProject = $aggregate->IdProject; $this->IdService = $aggregate->IdService;}}public static function GetInstance($aggregate = NULL){}public function GetById($array = NULL, $id = 0){$items = array_filter($array, function($item) use ($id){ return $item->Id == $id; });return (count($items) > 0) ? current($items) : NULL;}public function GetListByFilter($array = NULL, $filter = NULL){$result = [];if($array != NULL && $filter != NULL){foreach($array as $item){if($this->CompareObject($item, $filter)){$result[] = $item;}}}return $result;}private function CompareObject($item = NULL, $filter = NULL){foreach($filter as $key => $value){$val = $item->{$key};$nok = (is_numeric($value) && $val != $value)|| (is_string($value) && strpos($val, $value) === FALSE);if($nok){return FALSE;}}return TRUE;}}abstract class BaseRepository{protected $IdProject = 0;protected $IdService = 0;protected $Dao = NULL;protected $Log = NULL;public function __construct($project = 0, $service = 0) {$this->IdProject = $project;$this->IdService = $service; $connectionString = ConfigurationManager::GetKey( "connectionString" );$oConnString = ConfigurationManager::GetConnectionStr($connectionString); $injector = Injector::GetInstance(); $this->Log = $injector->Resolve( "ILogManager" ); $this->Dao = $injector->Resolve( "IDataAccessObject" ); $this->Dao->Configure($oConnString);}public abstract function GetAggregate();public static function GetInstance($project = 0, $service = 0){}public function Get($entityName = ""){return $this->Dao->Get($entityName);}public function GetByFilter($entityName = "", $filter = NULL){return $this->Dao->GetByFilter($entityName, $filter);}public function Create($entity = NULL){if($entity != NULL){ $entity->Id = $this->Dao->Create($entity);return $entity;}return FALSE;}public function Read($entityName = "", $identity = NULL){return $this->Dao->Read($identity, $entityName);}public function Update($entity = NULL){if($entity != NULL){$this->Dao->Update($entity);return $entity;}return FALSE;}public function Delete($entityName = "", $identity = NULL){return $this->Dao->Delete($identity, $entityName);}}interface IBookingManagement{public function RegisterBooking($entity = NULL, $saveClient = FALSE, $sendNotification = TRUE);public function SavePropertyBooking($id = 0, $propName = "", $propValue = NULL);public function CancelBooking($id = 0, $state = 0);public function GetAggregate($sDate = "");public function GetBookingById($id = 0);public function GetBookingsByDate($sDate = "");public function GetBookingsByFilter($filter = NULL);public static function GetInstance($project = 0, $service = 0);}class BookingManagement extends \BaseManagement implements \IBookingManagement{protected $Services = NULL;protected $Repository = NULL;private static $_reference = NULL;public function __construct($project = 0, $service = 0){ parent::__construct($project, $service); $this->Repository = BookingRepository::GetInstance($project, $service); $this->Aggregate = $this->Repository->GetAggregate($project, $service); $this->Services = BookingServices::GetInstance($this->Aggregate);}public function GetAggregate($sDate = ""){$this->Aggregate->SetAggregate($sDate);return $this->Aggregate;}public static function GetInstance($project = 0, $service = 0){ if(BookingManagement::$_reference == NULL){ BookingManagement::$_reference =new \BookingManagement($project, $service);}return BookingManagement::$_reference;}public function RegisterBooking($entity = NULL, $saveClient = FALSE, $sendNotification = TRUE){ $entity->Project = $this->IdProject;$result = $this->Services->Validate($entity);if(!is_array($result) && $result == TRUE ){$exist = $this->Services->Exist($entity);if($exist == FALSE){$result = $this->CreateBooking($entity, $saveClient, $sendNotification);}else{$result = [1];}}return $result;}public function SavePropertyBooking($id = 0, $propName = "", $propValue = NULL){ $result = -1; $entity = $this->Repository->Read( "Booking", $id); if($entity != NULL){ $result = $this->UpdatePropertyBooking($entity, $propName, $propValue);}return $result;}public function CancelBooking($id = 0, $state = 0){ $result = -1; $valState = $this->Services->ValidateState($state); $entity = $this->Repository->Read( "Booking", $id); if($entity != NULL && $valState == TRUE){ if($entity->State == $state){ return 0; } if($this->UpdatePropertyBooking($entity, "State", $state) == 0){ $subject = ConfigurationManager::GetKey("mailCancel"); $not = $this->Repository->CreateNotification($entity, $subject); $result = ($not == FALSE) ? -3 : 0;}else{$result = -2;}}else if($valState == FALSE){$result = -4;}return $result;}public function GetBookingById($id = 0){return $this->Repository->Read( "Booking", $id);}public function GetBookingsByDate($sDate = ""){ $filter = [ "Project" => $this->IdProject, "Date" => $sDate ]; return $this->Repository->GetByFilter( "Booking", $filter);}public function GetBookingsByFilter($filter = NULL){ if($filter == NULL){$filter = [ "Project" => $this->IdProject ];}else{$filter["Project"] = $this->IdProject;} return $this->Repository->GetByFilter( "Booking", $filter);}private function CreateBooking($entity = NULL, $saveClient = FALSE, $sendNotification = TRUE){$log = $this->Services->GetActivity($entity);$this->Repository->Create($log);$entity->Client = $this->Repository->GetClient($entity, $saveClient);$booking = $this->Repository->Create($entity);if($booking != FALSE ){$this->Aggregate->Booking = $booking; $subject = ConfigurationManager::GetKey("mailSubject");if(class_exists("ZapperDAL")){$zapper = new \ZapperDAL();$required = $zapper->RequiredPrePay($booking->Project,($booking->Offer == null) ? 0 : $booking->Offer,$booking->Diners, $booking->Date);if($required){$booking = $zapper->RegisterZapperBooking($booking);$this->Aggregate->Booking = $booking;$subject = "zapper-booking";}}if($sendNotification && $entity->BookingSource == 1){$this->Repository->CreateNotification($booking, $subject);}return [1];}else{return [0];}}private function UpdatePropertyBooking($entity = NULL,$propertyName = "", $propertyValue = NULL){$return = -1;if($entity != NULL){if($propertyName != ""){ $hist = new \BookingBck($entity); $this->Repository->Create($hist); $entity->{$propertyName} = $propertyValue; $this->Repository->Update($entity); $return = 0;}else{$return = -2;}}return $return;}}interface IBookingRepository {public static function GetInstance($project = 0, $service = 0);public function GetAggregate($project = 0, $service = 0);public function GetClient($entity = NULL, $advertising = FALSE);public function CreateNotification($entity = NULL, $subject = "");}class BookingRepository extends \BaseRepository implements \IBookingRepository{private static $_reference = NULL;public function __construct($project = 0, $service = 0){parent::__construct($project, $service);}public static function GetInstance($project = 0, $service = 0){ if(BookingRepository::$_reference == NULL){BookingRepository::$_reference = new \BookingRepository($project, $service);}return BookingRepository::$_reference;}public function GetAggregate($project = 0, $service = 0) { $agg = new \BookingAggregate($project, $service); $agg->Project = $this->Read("Project", $project); $agg->States = $this->Get("State");$agg->Turns = $this->Get("Turn");$agg->Slots = $this->Get("Slot");$agg->BookingSources = $this->Get("BookingSource"); $filter = [ "Project" => $project ];$configs = $this->GetByFilter("ConfigurationService" , $filter);$agg->Configuration = (empty($configs)) ? new \ConfigurationService() : $configs[0];$agg->Places = $this->GetByFilter("Place" , $filter);$agg->Blocks = $this->GetByFilter("Block" , $filter);$agg->Configurations = $this->GetByFilter("Configuration", $filter);$agg->Offers = $this->GetByFilter( "Offer" , $filter);$agg->OffersEvents = $this->GetByFilter("OfferEvent" , $filter);foreach($agg->Offers as $offer){$filtroOferta = ["Offer" => $offer->Id];$offer->Config =$this->GetByFilter("OfferConfig", $filtroOferta);}$agg->OffersShare = $this->GetByFilter("OfferShareDTO", $filter);$agg->TurnsShare = $this->GetByFilter("TurnShareDTO", $filter);$agg->SetAggregate();return $agg;}public function GetClient($entity = NULL, $advertising = FALSE){$filter = ["Project" => $entity->Project ]; if(empty($entity->Email)){$filter["Phone"] = "%$entity->Phone%";}else{$filter["Email"] = "%$entity->Email%";}$clients = $this->Dao->GetByFilter( "Client", $filter);$client = (empty($clients)) ? NULL : $clients[0]; if($client == NULL){$client = new \Client();$client->Project = $entity->Project;$client->Name = $entity->ClientName;$client->Email = $entity->Email;$client->Phone = $entity->Phone;$client->Advertising = $advertising;$client->Id = $this->Dao->Create($client);}else{if($client->Advertising == FALSE){$client->Advertising = $advertising;$this->Dao->Update($client);}}return $client->Id;}public function CreateNotification($entity = NULL, $subject = ""){if($entity != NULL) {$bookingDTO = $this->Read("BookingNotificationDTO", $entity->Id);if($bookingDTO != NULL){$date = new \DateTime($bookingDTO->Date);$bookingDTO->ClientName = $bookingDTO->Name;$bookingDTO->Date = strftime("%A %d de %B del %Y",$date->getTimestamp());$bookingDTO->Turn = $bookingDTO->Start;$bookingDTO->Offer = (!empty($bookingDTO->Title)) ? $bookingDTO->Title : "Sin oferta";$bookingDTO->OfferTerms = (!empty($bookingDTO->Title)) ? $bookingDTO->Terms : "";$bookingDTO->OfferDesc = (!empty($bookingDTO->Title)) ? $bookingDTO->Description : "";return $this->RegisterNotification($bookingDTO, $subject);}}return FALSE;}private function RegisterNotification($entity = NULL, $subject = ""){if($entity != NULL && is_object($entity)){$date = new \DateTime( "NOW" );$dto = new \Notification();$dto->Project = $this->IdProject;$dto->Service = $this->IdService;$dto->To = $entity->Email;$dto->Subject = $subject;$dto->Date = $date->format( "y-m-d h:i:s" );$entity->Ticket = $this->GetTicket($dto->To, $entity);$dto->Content = json_encode($entity);$this->Dao->Create( $dto );$dto->To = "";$entity->Ticket = $this->GetTicket("", $entity);$dto->Content = json_encode($entity);$this->Dao->Create( $dto );return TRUE;}return FALSE;}private function GetTicket($user = "", $dto = ""){ if($user == ""){ $user = "admin"; } $arr = ["User" => $user, "Project" => $dto->Project, "Id" => $dto->Id ]; $text = json_encode($arr); return $this->fnEncrypt($text, "resbooking2015");}private function fnEncrypt($sValue, $sSecretKey){return base64_encode($sValue);}}interface IBookingServices {public static function GetInstance($aggregate = NULL);public function Exist($entity = NULL);public function GetActivity($entity = NULL);public function Validate($entity = NULL);public function ValidateState($id = 0);}class BookingServices extends \BaseServices implements \IBookingServices{private static $_reference = NULL;protected $Repository = NULL;protected $Aggregate = NULL;protected $Result = [];public function __construct($aggregate = NULL) {parent::__construct($aggregate);$this->Repository = BookingRepository::GetInstance($this->IdProject, $this->IdService);}public static function GetInstance($aggregate = NULL) {if(BookingServices::$_reference == NULL){BookingServices::$_reference = new \BookingServices($aggregate);}return BookingServices::$_reference;}public function Exist($entity = NULL){$filter = [ "Project" => $entity->Project, "Turn" => $entity->Turn,"Date" => $entity->Date, "Diners" => $entity->Diners,"Email" => "%".$entity->Email."%", "Phone" => "%".$entity->Phone."%","Offer" => $entity->Offer, "Place" => $entity->Place ];$reservas = $this->Repository->GetByFilter( "Booking" , $filter );return !empty($reservas);}public function GetActivity($entity = NULL){$info = [ "REQUEST" => $_REQUEST, "Entity" => $entity];$date = new \DateTime( "NOW" );$log = new \Log();$log->Booking = $entity->Id;$log->Address = $_SERVER["REMOTE_ADDR"];$log->Information = json_encode($info);$log->Date = $date->format( "Y-m-d" );return $log;}public function Validate($entity = NULL){$this->Result = [];$this->ValidateClientName($entity->ClientName);$this->ValidateDate($entity->Date);$this->ValidateDiners($entity->Diners);$this->ValidateEmail($entity->Email);$this->ValidatePhone($entity->Phone);$this->ValidatePlace($entity->Place);$this->ValidateTurn($entity->Turn, $entity->Date);$this->ValidateOffer($entity->Offer, $entity->Turn, $entity->Date);return empty($this->Result) ? TRUE : $this->Result;}public function ValidateState($id = 0){ $state = $this->GetById($this->Aggregate->States, $id); return ($state != NULL);}private function ValidateClientName($name=""){if(empty($name)){$this->Result[] = -1;}else if(!is_string($name)){$this->Result[] = -2;}else if(strlen($name) > 100){$this->Result[] = -3;}}private function ValidateEmail($email = ""){if(empty($email)){ }else if(strlen($email) > 100){$this->Result[] = -6;}else if(filter_var($email, FILTER_VALIDATE_EMAIL) === FALSE){$this->Result[] = -5;}}private function ValidatePhone($phone = ""){if(empty($phone)){$this->Result[] = -7;}else if(!is_string($phone)){$this->Result[] = -8;}else if(strlen($phone) > 15){$this->Result[] = -9;}}private function ValidateDiners($diners = 0){if(empty($diners)){$this->Result[] = -10;}else if(is_numeric($diners)=== FALSE){$this->Result[] = -11;}else if($diners > $this->Aggregate->MaxDiners){$this->Result[] = -12;}else if($diners < $this->Aggregate->MinDiners){$this->Result[] = -13;}}private function ValidateDate($sDate = ""){ $regex = "((19|20)[0-9]{2}[-]". "(0[1-9]|1[012])[-]0[1-9]|[12][0-9]|3[01])";if(empty($sDate)){$this->Result[] = -14;}else if(preg_match($regex, $sDate) != 1){$this->Result[] = -15;}else{try{$date = new \DateTime($sDate);$yesterday = new \DateTime( "YESTERDAY" );if($date <=$yesterday){$this->Result[] = -16;}}catch(Exception $e){$this->Result[] = -15;}}}private function ValidatePlace($place = 0){if(empty($place)){$this->Result[] = -17;}else if(!is_numeric($place)){$this->Result[] = -18;}else{$filter = ["Project" => $this->Aggregate->IdProject,"Id" => $place ];$places = $this->GetListByFilter($this->Aggregate->Places, $filter);if(empty($places)){$this->Result[] = -19;}}}private function ValidateTurn($turn = 0, $sDate = ""){ $regex = "((19|20)[0-9]{2}[-]" . "(0[1-9]|1[012])[-]0[1-9]|[12][0-9]|3[01])";if(empty($turn)){$this->Result[] = -20;}else if(!is_numeric($turn)){$this->Result[] = -21;}else if(empty($sDate)){$this->Result[] = -14;}else if(preg_match($regex, $sDate) != 1){$this->Result[] = -15;}else if($this->TurnIsBlock($turn, $sDate)){$this->Result[] = -22;}else if($this->TurnIsOpen($turn, $sDate) || $this->TurnIsConfig($turn, $sDate)){if(!$this->TurnIsAlive($turn, $sDate)){$this->Result[] = -27;}else if(!$this->ValidateTurnShare($turn, $sDate)){$this->Result[] = -28;}}else{$this->Result[] = -23;}}private function TurnIsAlive($id = 0, $sDate = ""){ $date = new \DateTime($sDate);$current = new \DateTime("NOW");$validar = (intval($date->format("d")) == intval($current->format("d")))&& (intval($date->format("m")) == intval($current->format("m")))&& (intval($date->format("Y")) == intval($current->format("Y")));if($validar == FALSE){ return TRUE;} $turn = $this->GetById($this->Aggregate->Turns, $id);if($turn != NULL && $turn instanceof \Turn){$start = substr($turn->Start, 0, 5);$startParts = explode(":", $start);$H = intval($current->format("H"));$h = intval($startParts[0]);if( $H < $h){return TRUE;}else if($H == $h){$M = intval($current->format("i")) + 20;$m = intval($startParts[1]);return $M < $m;}}return FALSE;}private function TurnIsBlock($turn = 0, $sDate =""){$blocksFilter = ["Project" => $this->IdProject,"Turn" => $turn, "Date" => $sDate, "Block" => 0];$blocks = $this->GetListByFilter($this->Aggregate->Blocks, $blocksFilter);return !empty($blocks);}private function TurnIsOpen($turn = 0, $sDate =""){$blocksFilter = [ "Project" => $this->IdProject,"Turn" => $turn, "Date" => $sDate, "Block" => 1];$blocks = $this->GetListByFilter($this->Aggregate->Blocks, $blocksFilter);return !empty($blocks);}private function TurnIsConfig($turn = 0, $sDate =""){$date = new \DateTime($sDate);$dayOfWeek = $date->format( "N" );$filter = ["Project" => $this->IdProject, "Day" => $dayOfWeek, "Turn" => $turn ];$configs = $this->GetListByFilter($this->Aggregate->Configurations, $filter);return !empty($configs);}private function ValidateTurnShare($id = 0, $sDate = ""){$filter = [ "Project" => $this->IdProject,"Turn" => $id, "Date" => $sDate ];$shares = $this->GetListByFilter($this->Aggregate->TurnsShare, $filter);$filterShares = array_filter($shares, function($item){ return $item->DinersFree <= 0; });return empty($filterShares);}private function ValidateOffer($offer = 0, $turn = 0, $sDate = "" ){if($offer > 0){$off = $this->GetById($this->Aggregate->Offers, $offer);if($off == NULL){$this->Result[] = -24;} else if($this->OfferIsOpen($offer, $turn, $sDate) == TRUE){return;}else if($this->OfferIsClose($offer, $turn, $sDate) == TRUE){$this->Result[] = -26;}else if(!$this->ValidateOfferDates($off, $sDate)){$this->Result[] = -25;}else if(!$this->ValidateOfferConfig($off, $turn, $sDate)){$this->Result[] = -26;}else if(!$this->ValidateOfferShare($off, $turn, $sDate)){$this->Result[] = -29;}}}private function ValidateOfferConfig($offer = NULL, $idturn = 0, $sDate = ""){if($offer != NULL) {$date = new \DateTime($sDate);$dayOfWeek = $date->format("N");$filter = [ "Turn" => $idturn, "Day" => $dayOfWeek ]; $configs = json_decode($offer->Config);if($configs == FALSE){$configs = [];}return !empty($this->GetListByFilter($configs, $filter));}return FALSE;}private function ValidateOfferDates($offer = NULL, $sDate = ""){ $date = new \DateTime($sDate);$start = (isset($offer->Start) && $offer->Start != ""&& $offer->Start != "0000-00-00 00:00:00")? new DateTime($offer->Start) : NULL;$end = (isset($offer->End) && $offer->End != ""&& $offer->End != "0000-00-00 00:00:00")? new DateTime($offer->End) : NULL;$cmp_ok_1 = ($start == NULL || ($start != NULL && $date >= $start));$cmp_ok_2 = ($end == NULL || ($end != NULL && $date <= $end));return ($cmp_ok_1 && $cmp_ok_2);}private function OfferIsOpen($id = 0, $turn = 0, $sDate = ""){$filter = ["Project" => $this->IdProject, "Offer" => $id,"Turn" => $turn, "Date" => $sDate, "State" => 1];$events = $this->GetListByFilter($this->Aggregate->AvailableOffersEvents, $filter);return !empty($events);}private function OfferIsClose($id = 0, $turn = 0, $sDate = ""){ $filter = ["Project" => $this->IdProject, "Offer" => $id,"Turn" => $turn, "Date" => $sDate, "State" => 0];$events = $this->GetListByFilter($this->Aggregate->AvailableOffersEvents, $filter);return !empty($events);}private function ValidateOfferShare($id = 0, $idTurn = 0, $sDate = ""){$turn = $this->GetById($this->Aggregate->Turns, $idTurn);$filterShares = [];if($turn != NULL){$filter = [ "Project" => $this->IdProject, "Offer" => $id,"Slot" => $turn->Slot, "Date" => $sDate ];$shares = $this->GetListByFilter($this->Aggregate->OffersShare, $filter);$filterShares = array_filter($shares, function($item){ return $item->DinersFree <= 0; });}return empty($filterShares);}}class BookingAggregate extends \BaseAggregate{public $BookingSources = [];public $States = [];public $Turns = [];public $TurnsShare = [];public $Slots = [];public $Places = [];public $Offers = [];public $OffersEvents = [];public $OffersShare = [];public $Blocks = [];public $Configurations = [];public $AvailablePlaces = [];public $AvailableOffers = [];public $AvailableOffersEvents = [];public $AvailableBlocks = [];public $AvailableTurns = [];public $Client = NULL;public $Booking = NULL;public $Configuration = NULL;public $MinDiners = 1;public $MaxDiners = 25;public $Date = NULL;public function __construct($projectId = 0, $serviceId = 0) {$this->IdProject = $projectId;$this->IdService = $serviceId;$this->Booking = new \Booking();$this->Client = new \Client();$this->Configuration = new \ConfigurationService();}public function SetAggregate($sDate = ""){$this->Date = ($sDate != "") ? new \DateTime($sDate) : new \DateTime("NOW");$this->MaxDiners = $this->Configuration->MaxDiners;$this->MinDiners = $this->Configuration->MinDiners;$this->FilterAvailablePlaces();$this->FilterAvailableBlocks();$this->FilterAvailableOffersEvents();$this->FilterAvailableOffers();$this->FilterAvailableTurns();$yesterday = new \DateTime("YESTERDAY");$arr = [];foreach($this->OffersShare as $item){$date = new \DateTime($item->Date);if($date <= $yesterday){continue;}$arr[] = $item;}$this->OffersShare = $arr;$arr = [];foreach($this->TurnsShare as $item){$date = new \DateTime($item->Date);if($date <= $yesterday){continue;}$arr[] = $item;}$this->TurnsShare = $arr;}private function FilterAvailablePlaces(){$this->AvailablePlaces = array_filter($this->Places, function($item){ return$item->Active == TRUE;});}private function FilterAvailableBlocks(){$yesterday = new \DateTime( "YESTERDAY" );$this->AvailableBlocks = array_filter($this->Blocks, function($item) use ($yesterday){$dateBlocked = new \DateTime($item->Date);return $dateBlocked >= $yesterday;});}private function FilterAvailableOffersEvents(){$yesterday = new \DateTime( "YESTERDAY" );$this->AvailableOffersEvents = array_filter($this->OffersEvents, function($item) use ($yesterday){$date = new \DateTime($item->Date);return $date >= $yesterday;});}private function FilterAvailableOffers(){$this->AvailableOffers = [];$yesterday = new \DateTime("YESTERDAY");foreach($this->Offers as $offer){if($offer->Active != 1){continue;}$end = ($offer->End == "0000-00-00 00:00:00" ) ? NULL : new \DateTime($offer->End);if($end > $yesterday || $end == NULL){$this->AvailableOffers[] = $offer;}} }private function FilterAvailableTurns(){$this->AvailableTurns = array();foreach($this->Turns as $turn){$t = $this->SetTurnData($turn);if($t != NULL){$this->AvailableTurns[] = $t;}} }private function SetTurnData($turn = NULL){$configs = $this->GetConfigByTurn($turn->Id);if(!empty($configs)){$days = [];foreach($configs as $item){$days[] = $item->Day;}$turn->Days = $days;$turn->Start = substr($turn->Start, 0, 5);$turn->End = substr($turn->End, 0, 5);return $turn;}return NULL;}private function GetConfigByTurn($id = 0){$configs = array_filter($this->Configurations, function ($item) use ($id) {return ($item->Turn == $id);});return (empty($configs)) ? [] : $configs;}}class Block{public $Id = 0;public $Project = 0;public $Turn = 0;public $Date = NULL;public $Block = TRUE;public $Year = 0;public $Week = 0;}class Booking{public $Id = 0;public $Project = 0;public $Turn = 0;public $Client = NULL;public $Date = NULL;public $Diners = 1;public $ClientName = "";public $Email = "";public $Phone = "";public $CreateDate = NULL;public $State = null;public $Offer = null;public $Place = null;public $Comment = "-";public $BookingSource = NULL;public $Notes = "";public $PreOrder = "";public $sTable = "";public function __construct(){$date = new DateTime( "NOW" );$this->Date = $date->format( "Y-m-d H:i:s" );$this->CreateDate = $date->format( "Y-m-d H:i:s" );}}class BookingBck{public $Id = 0;public $Ref = null;public $Data = "[]";public $Date = null;public function __construct($o = null){$dt = new DateTime();$this->Date = $dt->format('Y-m-d H:i:s'); if($o != null){$this->Ref = $o->Id;$this->Data = json_encode($o);}}}class BookingSource{public $Id = 0;public $SourceName = "";public $Description = "";}class Client{ public $Id = 0;public $Project = 0;public $Name = "";public $Email = "";public $Phone = "";public $CreateDate = NULL;public $UpdateDate = NULL;public $State = 1;public $Vip = FALSE;public $Comments = ""; public $Advertising = FALSE;public function __construct(){$date = new \DateTime( "NOW" );$this->CreateDate = $date->format( "Y-m-d H:i:s" );$this->UpdateDate = $date->format( "Y-m-d H:i:s" );}}class Comment{public $Id = 0;public $Booking = 0;public $Text = "";public $Date = "";public $UserName = "";public function __construct(){$date = new DateTime( "NOW" );$this->Date = $date->format( "Y-m-d H:i:s" );}}class Configuration{public $Id = 0;public $Project = 0;public $Turn = 0;public $Day = 0;public $Count = 0;}class ConfigurationService {public $Id = 0;public $Project = 0;public $Service = 0;public $MinDiners = 1;public $MaxDiners = 25;public $Reminders = FALSE;public $TimeSpan = 1;public $TimeFilter = 24;public $Diners = 1;public $Advertising = FALSE;public $PreOrder = FALSE;}class Day{public $Id = 0;public $Name = "";public $DayOfWeek = 1;}class Log{public $Id = 0;public $Booking = 0;public $Address = "";public $Date = NULL;public $Information = "";public function __construct(){$date = new DateTime("NOW");$this->Date = $date->format( "Y-m-d H:i:s" );}}class Offer{public $Id = 0;public $Project = 0;public $Title = 0;public $Description = "";public $Terms = "";public $Start = "";public $End = "";public $Active = TRUE;public $CreateDate = NULL;public $UpdateDate = NULL;public $Web = FALSE;}class OfferConfig{public $Id = 0;public $Offer = 0;public $Day = 0;public $Slot = 0;public $Turn = 0;}class OfferEvent {public $Id = 0;public $Project = 0;public $Turn = 0;public $Offer = 0;public $Config = "";public $Year = 0;public $Week = 0;public $DayOfWeek = 0;public $Date = "";public $State = FALSE;}class OfferShare {public $Id = 0;public $Project = 0;public $Offer = 0;public $DayOfWeek = 0;public $Slot = 0;public $Turn = NULL;public $Share = 0;}class Place{public $Id = 0;public $Project = 0;public $Name = 0;public $Description = "";public $Size = 0;public $Active = true;}class Slot{public $Id = 0;public $Name = "";}class State{public $Id = 0;public $Name = 0;public $Description = "";public $Level = 0;}class Turn{public $Id = 0;public $Slot = 0;public $Start = "";public $End = "";}class TurnShare {public $Id = 0;public $Project = 0;public $Turn = 0;public $DayOfWeek = 0;public $Share = 0;}class BlockDTO{public $Id = 0;public $Year = 2014;public $Week = 1;public $DayOfWeek = 1;public $Turn = 0;public $Date = "";public $Block = FALSE;public function __construct($year = 2014, $week=1, $day = 1, $turn = 0, $date = "", $block = FALSE, $id = 0){$this->Id = $id;$this->Year = $year;$this->Week = $week;$this->DayOfWeek = $day;$this->Turn = $turn;$this->Block = $block;$this->Date = $date;}}class BookingDTO { public $Id = 0;public $Project = 0;public $Turn = 0;public $Client = NULL;public $Date = NULL;public $Diners = 1;public $ClientName = "";public $Email = "";public $Phone = "";public $CreateDate = NULL;public $State = null;public $Offer = null;public $Place = null;public $Comment = "-";public $BookingSource = NULL; public $Notes = "";public $PreOrder = ""; public $TurnSlot = 0;public $TurnStart = "";public $TurnEnd = ""; public $PlaceName = 0;public $PlaceDescription = "";public $PlaceSize = 0;public $OfferTitle = 0;public $OfferDescription = "";public $OfferTerms = "";public $OfferStart = "";public $OfferEnd = ""; public $SourceName = "";public $SourceDescription = ""; public $ClientCount = 0;public $sTable = "";public $ClientComments = "";public $ZapperState = "";}class ClientDTO {public $Id = 0;public $Project = 0;public $Name = "";public $Email = "";public $Phone = "";public $CreateDate = NULL;public $UpdateDate = NULL;public $State = 1;public $Vip = FALSE;public $Comments = "";public $Total = 0;public $Estado_0 = 0;public $Estado_1 = 0;public $Estado_2 = 0;public $Estado_3 = 0;public $Estado_4 = 0;public $Estado_5 = 0;public $Estado_6 = 0;public $Estado_7 = 0;public $UltimaFecha = "";public $Advertising = FALSE;}class RequestDTO { public $Id = 0;public $Project = 0;public $Turn = 0;public $Client = NULL;public $Date = NULL;public $Diners = 1;public $ClientName = "";public $Email = "";public $Phone = "";public $CreateDate = NULL;public $State = null;public $Offer = null;public $Place = null;public $Comment = "-";public $BookingSource = NULL; public $TurnId = 0;public $TurnSlot = 0;public $TurnStart = "";public $TurnEnd = ""; public $PlaceId = 0;public $PlaceProject = 0;public $PlaceName = 0;public $PlaceDescription = "";public $PlaceSize = 0;public $PlaceActive = true; public $OfferId = 0;public $OfferProject = 0;public $OfferTitle = 0;public $OfferDescription = "";public $OfferTerms = "";public $OfferStart = "";public $OfferEnd = "";public $OfferActive = true;}class TurnDTO {public $Project = 0;public $Id = 0;public $DOW = 0;public $Slot = 0;public $Start = "";public $End = "";}class BookingNotificationDTO {public $Id = 0;public $Project= 0;public $Start = "";public $Date = "";public $Diners = 0;public $Name = "";public $Email = "";public $Phone = "";public $State = NULL;public $Place = "";public $Title = "";public $Description = "";public $Terms = "";public $Comment = "";public $Notes = "";public $PreOrder = "";public $QrContent = "";}class OfferShareDTO {public $Project = 0;public $Offer = 0;public $Turn = NULL;public $Slot = 0;public $Date = "";public $Share = 0;public $BookingsTotal = 0;public $BookingsFree = 0;public $DinersTotal = 0;public $DinersFree = 0;}class TurnShareDTO {public $Project = 0;public $Turn = NULL;public $Date = "";public $Share = 0;public $BookingsTotal = 0;public $BookingsFree = 0;public $DinersTotal = 0;public $DinersFree = 0;} ?>
